#!/usr/bin/env python

import rospy
import roslaunch

import std_msgs.msg
import std_srvs.srv

launch = roslaunch.scriptapi.ROSLaunch()
launch.start()


class Supervisor:
    def __init__(self):
        self.main_desired_state = 'stopped'
        self.main_current_state = 'stopped'
        self.main_process = None
        
        rospy.Service("supervisor/start_main", std_srvs.srv.Empty, self.callback_start_main)
        rospy.Service("supervisor/stop_main", std_srvs.srv.Empty, self.callback_stop_main)   

    def callback_start_main(self, req):   
        self.main_desired_state = 'started'
        return []
        
    def callback_stop_main(self, req):   
        self.main_desired_state = 'stopped'
        return []




def main():
    global main_current_state
    rospy.init_node('goldo_supervisor')
    rate = rospy.Rate(10) # 10hz
    
    supervisor = Supervisor()

    
    while not rospy.is_shutdown():
        if supervisor.main_desired_state == 'started' and supervisor.main_current_state == 'stopped':
            node = roslaunch.core.Node('goldo_main', 'node', name='main', namespace='/goldo')
            supervisor.main_process = launch.launch(node)
            supervisor.main_current_state = 'started'
        if supervisor.main_desired_state == 'stopped' and supervisor.main_current_state == 'started':            
            supervisor.main_process.stop()
        rate.sleep()
 
if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass